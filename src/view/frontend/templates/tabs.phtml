<?php
    $tabs = $block->prepareTabsData();
    if (!$tabs) {
        return;
    }

    $uniqueId = uniqid();
    $htmlId = 'swissup-easytabs-' . $uniqueId;
    $tabsLayoutType = $block->getTabsLayoutType();
    $isCollapsed = false;
    $isExpanded = false;
    $isAccordion = false;
    $isDefault = false;
    switch ($tabsLayoutType) {
        case 'collapsed':
            $isCollapsed = true;
            break;
        case 'expanded':
            $isExpanded = true;
            break;
        case 'accordion':
            $isAccordion = true;
            break;
        default:
            $isDefault = true;
            break;
    }

    $hasAjaxTabs = in_array(true, array_column($tabs, 'is_ajax'));
    $initOptions = json_decode($block->getInitOptions(), true);
    $activeTabs = $initOptions['active'] ?? [0];
?>

<div id="<?= $htmlId ?>" class="product info detailed relative">
    <style>
        #<?= $htmlId ?> #customer-review-list { padding-top: 0; }
        #<?= $htmlId ?> #customer-review-list > :first-child { display: none; }
        #<?= $htmlId ?> :is(.tab-label, .tabs-toolbar-item) .counter::before { content: '('; }
        #<?= $htmlId ?> :is(.tab-label, .tabs-toolbar-item) .counter::after { content: ')'; }
        #<?= $htmlId ?> section.my-12 { margin-top: 0; margin-bottom: 0; }
        <?php if ($isDefault || $isCollapsed || $block->hasToolbar()): ?>
        #<?= $htmlId ?> .-mb-2px { margin-bottom: -2px; }
        #<?= $htmlId ?> .hover\:border-gray-300:hover { border-color: #D1D5DB; /* Tailwind's gray-300 */ }
        <?php endif; if ($isDefault): ?>
        #<?= $htmlId ?> div[role="tablist"] { display: none; }
        <?= '@media (min-width: 640px) {' ?>
            #<?= $htmlId ?> .sm\:hidden { display: none; }
            <?php if ($isDefault): ?>
            #<?= $htmlId ?> div[role="tablist"] { display: flex; }
            <?php endif; ?>
        <?= '}' ?>
        <?php endif; ?>
    </style>

<?php if ($block->hasToolbar()): ?>
    <?= $block->assign('tabs', $tabs)->fetchView($block->getTemplateFile('tabs-toolbar.phtml')); ?>
<?php endif; ?>

    <div class="product data items <?= $tabsLayoutType ?><?php if ($isExpanded): ?> md:flex md:flex-wrap<?php endif; ?> w-full mt-8"
        x-data="swissupEasytabs<?= $uniqueId ?>"
        x-defer="intersect"
    >
        <?php if ($isCollapsed): ?>
            <?= $block->assign('tabs', $tabs)->fetchView($block->getTemplateFile('layout/collapsed.phtml')); ?>
        <?php elseif ($isExpanded) : ?>
            <?= $block->assign('tabs', $tabs)->fetchView($block->getTemplateFile('layout/expanded.phtml')); ?>
        <?php elseif ($isAccordion) : ?>
            <?= $block->assign('tabs', $tabs)->assign('initOptions', $initOptions)->fetchView($block->getTemplateFile('layout/accordion.phtml')); ?>
        <?php else : ?>
            <?= $block->assign('tabs', $tabs)->assign('hasAjaxTabs', $hasAjaxTabs)->fetchView($block->getTemplateFile('layout/default.phtml')); ?>
        <?php endif ?>
    </div>
</div>

<script>
    document.addEventListener('alpine:init', () => {
        <?php if ($listenProductTabs = $block->getListenProductTabs()): ?>
        window.addEventListener('configurable-selection-changed', (event) => {
            const productId = event.detail.productIndex;
            const aliases = <?= json_encode($listenProductTabs) ?>;
            const url = <?= json_encode($block->getAjaxUrl('tab_alias')) ?>;
            const easytabsComponent = Alpine.evaluate(document.querySelector('#<?= $htmlId ?> .product.data.items'), '$data');
            const tabs = document.querySelectorAll('.product.data.items .tab-label');

            tabs && (async () => {
                for (const tab of tabs) {
                    const alias = tab.id.replace('tab-label-', '');
                    if (!aliases.includes(alias)) continue;
                    tab.dataset.ajaxurl = url.replace('/tab_alias/', `/${alias}/`).replace('/id/', '/parent_id/') + `id/${productId}/`;
                    await easytabsComponent.updateTabContent?.(tab);
                }
            })();

        });
        <?php endif; ?>
        Alpine.data('swissupEasytabs<?= $uniqueId ?>', () => ({
            activeTab: [<?= implode(',', $activeTabs) ?>]<?php if ($hasAjaxTabs || $listenProductTabs) :?>,
            isLoading: false,
            fetchTabContent(url) {
                return fetch(url, {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest'
                    }
                }).then(response => response.text());
            },
            processScripts(html) {
                const tempDiv = document.createElement('div');
                tempDiv.innerHTML = html;
                const scripts = tempDiv.querySelectorAll('script:not([type="text/x-magento-init"]');
                scripts.forEach(script => {
                    if (script.type && script.type !== 'text/javascript') return;
                    const newScript = document.createElement('script');
                    newScript.textContent = script.textContent;
                    document.body.appendChild(newScript);
                    script.remove();
                });

                return tempDiv.innerHTML;
            },
            async updateTabContent(tab) {
                const { ajaxurl } = tab.dataset;
                if (!ajaxurl || this.isLoading) return;
                this.isLoading = true;
                const panel = tab.ariaControlsElements?.[0] || document.getElementById(tab.id.replace('tab-label-', ''));
                const content = await this.fetchTabContent(ajaxurl);
                const processedContent = this.processScripts(content);
                panel.innerHTML = processedContent;
                delete tab.dataset.ajaxurl;
                this.isLoading = false;
            },
            init() {
                const tabs = this.$root.querySelectorAll('.tab-label');
                const activeTab = this.activeTab.map(index => tabs[index]).filter(Boolean);
                (async () => {
                    for (const tab of activeTab) {
                        await this.updateTabContent(tab);
                    }
                })();
            }
            <?php endif; ?>
        }));
    });
</script>
